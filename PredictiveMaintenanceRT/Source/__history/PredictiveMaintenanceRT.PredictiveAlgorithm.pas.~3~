unit PredictiveMaintenanceRT.PredictiveAlgorithm;

interface

type
  TPredictiveAlgorithm = class

  private
    {Private declarations}
    FCellId: integer;

    FLastMaintenance: Extended;

    FThresholdPieces: integer;
    FThresholdWorkedTime: integer;
    FThresholdTimeToMaintenance: integer;

    FPiecesBuilt: integer;
    FPiecesToBuild: integer;

    FTimeWorked: integer;
    FTimeToWork: integer;
    FTotalTimeWorked: integer;

    FWorkTimeToNextMaintenance: integer;

    FTimeFromLastMaintenance: integer;
    FTimeToNextMaintenance: integer;

    function CalculateMaintenanceDate: integer;
    function WorkTimeToDays(AHours: Extended): Extended;

  public
    {Public declarations}
  end;

implementation

{ TPredictiveAlgorithm }

function TPredictiveAlgorithm.CalculateMaintenanceDate: integer;
begin
  if FTotalTimeWorked > FThresholdWorkedTime then
    //in questo caso la manutenzione doveva già essere stata fatta

  FWorkTimeToNextMaintenance := FThresholdWorkedTime - FTimeWorked;

  //convertire FWorkTimeToNextMaintenance in giorni di lavoro calcolando che la macchina lavorerà teoricamente
  //8 ore al giorno e solo 5 giorni alla settimana quindi fare un calcolo che ritorna una data nel futuro


  //prendere in considerazione solo i tempi di lavoro per calcolare la data in base alla soglia tramite tempo di lavoro+

  //prendere in considerazione solo i pezzi prodotti per calcolare la data in base alla soglia tramite i pezzi prodotti


  //se so che la soglia è di 100 pezzi e ne ho già prodotti 30 fino ad adesso la data sarà:
  //data di oggi + giorni che servono per produrre altri 70 pezzi

  //per calcolare i giorni che servono per produrre x pezzi dovro sapere quanti pezzi penso di produrre in un giorno
  //potrei prendere questa informazione dai record passati

  //per sapere i giorni di lavoro è meglio passare dicendo quanti pezzi produco in un ora di lavoro

  //calcolare quanti pezzi produco all ora in media:
  //pezzi prodotti / ore di lavoro per produrre quei pezzi := pezzi prodotti in un ora
  //questi dati vengono presi dall ultimo parziale, si potrebbe prendere facendo una media degli ultimi x parziali(in un secondo momento)

  //trovare a questo punto i pezzi prodotti in una giornata di lavoro:
  //pezzi prodotti in un ora * 8 := pezzi prodotti in un giorno(8 ore)

  //trovare i giorni che servono per produrre x pezzi:
  //x pezzi da produrre / pezzi prodotti in un giorno := giorni per produrre x pezzi

  //bisogna tenere in considerazione i giorni non lavorativi
  //(forse prendendo in considerazione le settimane piuttosto che i giorni)



  //prendere in considerazione solo la data dall ultima manutenzione fino ad oggi per calcolare
  //la data in base alla soglia di tempo generale


end;

function TPredictiveAlgorithm.WorkTimeToDays(AHours: Extended): Extended;
begin
  Result := AHours / 8;
end;

end.
