unit PredictiveMaintenanceRT.WorkHoursCalculator;

interface

uses
  System.SysUtils, System.DateUtils, System.Generics.Collections, PredictiveMaintenanceRT.QueryHandler,
  PredictiveMaintenanceRT.ClosedPeriodModel, PredictiveMaintenanceRT.CalendarDayModel,
  PredictiveMaintenanceRT.CalendarModel;


type
  TWorkHoursCalculator = class
  private
    FIDCell: integer;
    FHolidayList: TList<Double>;
    FQueryHandler: TQueryHandler;
    FClosedPeriods: TList<TClosedPeriodModel>;
    FDayCalendar: TList<TCalendarDayModel>;
    FCalendar: TList<TCalendarModel>;
//    FDaysOfWeek: TList<Double>;
    function IsHoliday(const ADate: Double): Boolean;
    procedure AddClosedPeriods;
    procedure InitializeCalendar;

    function GetQueryHandler: TQueryHandler;
    property QueryHandler: TQueryHandler read GetQueryHandler write FQueryHandler;

  public
    constructor Create(ACellId: integer);
    destructor Destroy; override;
    function GetWorkHours(ADate: Double): Double;
    procedure AddHoliday(const AHoliday: Double);
  end;

implementation


constructor TWorkHoursCalculator.Create(ACellId: integer);
begin
  FIDCell := ACellId;
  FHolidayList := TList<Double>.Create;
  AddClosedPeriods;
  InitializeCalendar;
end;
destructor TWorkHoursCalculator.Destroy;
begin
  FHolidayList.Free;
  inherited;
end;
procedure TWorkHoursCalculator.AddClosedPeriods;
var
  LClosedPeriod: TClosedPeriodModel;
  LCPDay: Double;
begin
  FClosedPeriods := QueryHandler.GetClosedPeriods(FIDCell);

  for LClosedPeriod in FClosedPeriods do
  begin
    LCPDay := LClosedPeriod.DataInizio;
    while LCPDay <> LClosedPeriod.DataFine do
    begin
      AddHoliday(LCPDay);
      LCPDay := LCPDay + 1;
    end;
  end;
end;

procedure TWorkHoursCalculator.AddHoliday(const AHoliday: Double);
begin
  FHolidayList.Add(AHoliday);
end;
procedure TWorkHoursCalculator.InitializeCalendar;
var
  LDay: TCalendarDayModel;
  I: integer;
begin
  LDay := TCalendarDayModel.Create;
  FDayCalendar := QueryHandler.GetCalendarData(FIDCell);

  I := 0;
  FCalendar := TList<TCalendarModel>.Create;
  FCalendar.Add(nil);
  for LDay in FDayCalendar do
  begin
    if FCalendar[I].IDCalendar <> LDay.IDCalendar then
    begin
      I := I + 1;
      FCalendar[I].IDCelPro := LDay.IDCell;
      FCalendar[I].IDCalendar := LDay.IDCalendar;
      FCalendar[I].DayOfWeek[LDay.Day] := LDay.TotOre;
      FCalendar[I].StartDay := LDay.StartDay;
    end
    else
    begin
      FCalendar[I].DayOfWeek[LDay.Day] := LDay.TotOre;
    end;

  end;

end;

function TWorkHoursCalculator.IsHoliday(const ADate: Double): Boolean;
begin
  Result := FHolidayList.Contains(ADate);
end;

function TWorkHoursCalculator.GetQueryHandler: TQueryHandler;
begin
  if not Assigned(FQueryHandler) then
    FQueryHandler := TQueryHandler.Create;
  Result := FQueryHandler;
end;

function TWorkHoursCalculator.GetWorkHours(ADate: Double): Double;
var
  LDayOfWeek: Integer;
begin
  if IsHoliday(ADate) then
    Exit(0);

  // Determine the day of the week
  LDayOfWeek := DayOfTheWeek(ADate);

//  Result := FDaysOfWeek[LDayOfWeek];
end;
end.
